package net.ddns.lai.boardbooking;



import java.sql.Connection;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */


import java.sql.SQLException;
import java.util.List;
import java.util.UUID;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import javax.xml.ws.WebServiceContext;

import data.Boardgame;
import data.BoardgameData;
import data.Booking;
import data.BookingGroup;
import data.BookingRequest;
import data.DateRange;
import data.PaymentData;
import misc.Utils;
import net.ddns.lai.schema.boardbooking.BoardgameBookingAnswerType;
import net.ddns.lai.schema.boardbooking.BoardgameInfoType;
import net.ddns.lai.schema.boardbooking.BookingDataType;
import net.ddns.lai.schema.boardbooking.BookingDetailsListType;
import net.ddns.lai.schema.boardbooking.BookingDetailsType;
import net.ddns.lai.schema.boardbooking.BookingGroupListType;
import net.ddns.lai.schema.boardbooking.BookingGroupType;
import net.ddns.lai.schema.boardbooking.EmptyType;
import net.ddns.lai.schema.boardbooking.GameListType;
import net.ddns.lai.schema.boardbooking.OpenSessionType;
import net.ddns.lai.schema.boardbooking.RequestPaymentDataAnswerType;
import net.ddns.lai.schema.boardbooking.SuccessOrFailure;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2016-08-22T12:13:20.972+02:00
 * Generated source version: 3.1.6
 * 
 */

@javax.jws.WebService(
                      serviceName = "BoardBooking",
                      portName = "BoardBooking",
                      targetNamespace = "http://www.lai.ddns.net/BoardBooking/",
                      wsdlLocation = "file:/home/giovanni/workspace/LAIBoardgame/BoardBookingWS/WebContent/WEB-INF/wsdl/BoardBooking.wsdl",
                      endpointInterface = "net.ddns.lai.boardbooking.BoardBooking")
                      
public class BoardBookingImpl implements BoardBooking {

    @Resource
    private WebServiceContext wsContext; 
    private static final Logger LOG = Logger.getLogger(BoardBookingImpl.class.getName()); 
    private static final String userKey = "user"; 

    //TODO Add to client
    public BookingDetailsListType bookingDetails(String requestDetails) { 
        LOG.info("Executing operation bookingDetails");
        
        BookingDetailsListType answer = new BookingDetailsListType();
        
        try {
            LOG.info("Executing query");
            List<Booking> bookingList;
            try (Connection connection = Utils.getConnection()) {
                
                bookingList = BoardgameData.listBookings(UUID.fromString(requestDetails), 
                                                         connection);
            }
            LOG.info("Query done");
            for (Booking b : bookingList) {
                BookingDetailsType element = new BookingDetailsType();
                element.setBookingID(b.getId().toString());
                element.setGame(b.getName());
                element.setBaseDate(b.getRange().getBase());
                element.setEndDate(b.getRange().getEnd());
                answer.getItem().add(element);
            }
        } catch (IllegalArgumentException e) {
            LOG.info("Invalid UUID");
        }
        catch (SQLException e) {
            LOG.info("Query error");
            LOG.info(e.toString());
        }
        
        return answer;
        
    }

    public GameListType listGames(EmptyType listGames) { 
        LOG.info("Executing operation listGames");
        
        GameListType returnValue = new GameListType();
        try {
            LOG.info("Executing query");
            List<Boardgame> boardgameList;
            try (Connection connection = Utils.getConnection()) {
                boardgameList = BoardgameData.listBoardgames(connection); 
            }
            LOG.info("Query done");
            for (Boardgame b : boardgameList) {
                BoardgameInfoType item = new BoardgameInfoType();
                item.setName(b.getName());
                item.setPrice(b.getEncodedPrice());
                returnValue.getGame().add(item);
            }
        } catch (SQLException e) {
            LOG.info("listGames failed due to an exception");
        }
        return returnValue;
    }

    public BookingGroupListType bookingGroups(EmptyType requestBookingGroups) { 
        LOG.info("Executing operation bookingGroups");
        System.out.println(requestBookingGroups);
        String user = getUser();
        if (user == null) {
            LOG.info("Invalid session");
            return new BookingGroupListType();
        } else {
            try {
                LOG.info("Executing query");
                List<BookingGroup> groupList;
                try (Connection connection = Utils.getConnection()) {
                    groupList = BoardgameData.listBookingGroups(user, connection); 
                }
                LOG.info("Query done");
                BookingGroupListType answer = new BookingGroupListType();
                for (BookingGroup b : groupList) {
                    BookingGroupType item = new BookingGroupType();
                    item.setBookingID(b.getUuid().toString());
                    item.setPaid(b.isPaid());
                    answer.getItem().add(item);
                }
                return answer;
            } catch (SQLException e) {
                LOG.info("Query failed");
                return new BookingGroupListType();
            }
            
        }
    }

    public RequestPaymentDataAnswerType requestPaymentData(EmptyType payment) { 
        LOG.info("Executing operation requestPayment");
        String user = getUser();
        RequestPaymentDataAnswerType answer = new RequestPaymentDataAnswerType();
        if (user == null) {
            LOG.info("Invalid session");
            answer.setFailure(new RequestPaymentDataAnswerType.Failure());
        } else {
            LOG.info("Requesting payment for user " + user);
            PaymentData paymentData;
            try {
                LOG.info("Executing query");
                try (Connection connection = Utils.getConnection()) {
                    paymentData = BoardgameData.getPaymentData(user, connection); 
                }
                LOG.info("Query done");
                if (paymentData == null) {
                    LOG.info("Invalid requestPayment");
                    answer.setFailure(new RequestPaymentDataAnswerType.Failure());
                } else {
                    RequestPaymentDataAnswerType.Success success = new RequestPaymentDataAnswerType.Success();
                    success.setPrice(paymentData.getPrice());
                    success.setBookingID(paymentData.getUuid().toString());
                    answer.setSuccess(success); 
                }
            } catch (SQLException e) {
                LOG.info("Query exception for requestPayment");
                answer.setFailure(new RequestPaymentDataAnswerType.Failure());
            }
        }
        
        return answer;
    }

    public SuccessOrFailure abortBoardgameBooking(String bookingAbort) { 
        LOG.info("Executing operation abortBoardgameBooking");
        String user = getUser();
        if (user == null) {
            LOG.info("Invalid session");
            return SuccessOrFailure.FAILURE;
        } else {
            LOG.info("Aborting " + bookingAbort + " for " + user);
            UUID uuid;
            try {
                uuid = UUID.fromString(bookingAbort); 
            } catch (IllegalArgumentException e) {
                LOG.info("Invalid UUID for " + user + ": " + bookingAbort);
                return SuccessOrFailure.FAILURE;
            }
            try {
                LOG.info("Executing query");
                try (Connection connection = Utils.getConnection()) { 
                    if (BoardgameData.abortBooking(uuid, connection)) {
                        LOG.info("Succesfully abort");
                        return SuccessOrFailure.SUCCESS;
                    } else {
                        LOG.info("Abort query failed");
                        return SuccessOrFailure.FAILURE;
                    }
                }
            } catch (SQLException e) {
                LOG.info("Abort query exception");
                return SuccessOrFailure.FAILURE;
            }
        }
    }

    public BoardgameBookingAnswerType bookBoardgame(BookingDataType bookingData) { 
        LOG.info("Executing operation bookBoardgame");
        String user = getUser();
        BoardgameBookingAnswerType answer = new BoardgameBookingAnswerType();
        if (user == null) {
            LOG.info("Invalid session");
            answer.setFailure(new BoardgameBookingAnswerType.Failure());
        } else {
            LOG.info("Trying to book data for " + user);
            BookingRequest request = new BookingRequest(
                    bookingData.getGame(), 
                    user,
                    new DateRange(bookingData.getBaseDate(), bookingData.getEndDate())
            );
            try {
                LOG.info("Executing query");
                Booking booking;
                try (Connection connection = Utils.getConnection()) {
                    booking = BoardgameData.addBooking(request, connection); 
                }
                LOG.info("Query done");
                answer.setSuccess(booking.getId().toString());
            } catch (SQLException e) {
                answer.setFailure(new BoardgameBookingAnswerType.Failure());
            }
        } 
        return answer;
    }

    public SuccessOrFailure openSession(OpenSessionType openSession) { 
        LOG.info("Executing operation openSession");
        String user = openSession.getUser();
        if (user == null) {
            LOG.info("Invalid user");
            return SuccessOrFailure.FAILURE;
        } else {
            LOG.info("User: " + user);
            setUser(user);
            return SuccessOrFailure.SUCCESS;
        }
    }
    
    public String getUser() {
        HttpSession session = Utils.getSession(wsContext);
        synchronized (Utils.getSessionLock(session)) {
            Object user = session.getAttribute(userKey);
            if (user == null || !(user instanceof String)) {
                return null;
            } else {
                return (String) user;
            }
        }
    }
    
    public void setUser(String user) {
        HttpSession session = Utils.getSession(wsContext);
        synchronized (Utils.getSessionLock(session)) {
            session.setAttribute(userKey, user);
        } 
    }

}
